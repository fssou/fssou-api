name: CI CD

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_SESSION_NAME: github-actions-${{ github.run_id }}
  TF_STATE_BUCKET_NAME: ${{ secrets.TF_STATE_BUCKET_NAME }}
  ARTIFACT_NAME: fssou-api-${{ github.sha }}

permissions:
  id-token: write
  contents: read
  packages: write
  deployments: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: app/go.mod
          cache-dependency-path: "**/*.sum"
      - name: Test
        run: go test -v ./...

      - name: Build
        run: go build -tags lambda.norpc -o bootstrap cmd/fssou/main.go
        env:
          GOOS: linux
          GOARCH: amd64
      - name: Create ZIP
        run: zip fssou.zip bootstrap
      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        id: upload-artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: app/fssou.zip
  deployment:
    name: Deployment
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        id: artifact
        with:
          path: infra
          name: ${{ env.ARTIFACT_NAME }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }}
          role-duration-seconds: 900
          mask-aws-account-id: true
          output-credentials: true
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Terraform Configure
        run: |
          echo 'aws_region="${{ env.AWS_REGION }}"' >> generated.auto.tfvars
          echo 'gh_repo_id="${{ github.repository_id }}"' >> generated.auto.tfvars
          echo 'gh_repo_name="${{ github.repository }}"' >> generated.auto.tfvars
      - name: Terraform Initialize
        run: >
          terraform init
          -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}"
          -backend-config="key=terraform/state/${{ github.repository_id }}"
          -backend-config="region=${{ env.AWS_REGION }}"
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        run: >
          terraform plan
          -var="secret_credentials_x=${{ secrets.CREDENTIALS_X }}"
          -out=${{ github.sha }}.tfplan
      - name: Terraform Apply
        run: terraform apply -auto-approve ${{ github.sha }}.tfplan
